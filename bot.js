const jwt = require('./modules/jwt.js');
const helpers = require('./modules/helpers.js');
const messages = require('./modules/messages.js');
const discord = require('discord.js');
const bot = new discord.Client();

// Define global variables
var botName;
var jwtPayload;
var jwtToken;

// Connect to the GoW API
const gowApi = require('./modules/gowApi.js');

// Target a particular channel
const targetChannelId = "774654841120620576";

// Define Bot Behaviours
bot.on('ready', () => {

    botName = bot.user.username;

    // Get the security token
    jwtPayload = {
        user: botName
    };
    jwtToken = jwt.GenerateToken(jwtPayload);

    bot.user.setStatus('online');
    bot.user.setActivity('!help', { type: 'LISTENING' });

    console.log(`${botName} is online`);
});

bot.on('message', async message => {

    // Limit the bot commands to a particular channel
    //if(message.channel != targetChannelId) return;

    var discordUser = message.author.username;

    // Don't reply to messages generated by any bot
    //if (message.author.bot) return;
    
    // Don't reply to messages generated by this bot
    if (discordUser === botName) return;

    // Parse the message
    let parsedMessage = await helpers.ParseMessage(message);

    // Define the reply
    var data = null;
    var replies = Array();
    var reactions = null;
    var replyToPerson = true;

    if(parsedMessage.Command == null) return;

    switch (parsedMessage.Command) {
        case '!about':
            if(message.channel != null) message.channel.startTyping();

            replies.push(await messages.AboutThisBot());
            break;

        case '!campaign':
            if(message.channel != null) message.channel.startTyping();

            data = await gowApi.GetLatestCampaignTasks();
            if(data == null) {
                replies.push(messages.BotError());
                break;
            }

            replies = replies.concat(data.messages);
            replyToPerson = false;
            break;
    
        case '!guildwars':
        case '!gw':
            if(message.channel != null) message.channel.startTyping();
            
            let channelOnGwDefence = await helpers.GetChannelIdAsync(message.guild, "on_gw_defence");
            let channelOnGwOffence = await helpers.GetChannelIdAsync(message.guild, "on_gw_offence");        

            replies.push(await messages.ExplainGuldWars(channelOnGwDefence, channelOnGwOffence));
            break;

        case '!help':
            if(message.channel != null) message.channel.startTyping();
            
            replies.push(await messages.ListBotCommands());
            break;

        case'!honour':
        case'!honor':
            if(message.channel != null) message.channel.startTyping();
        
            data = await gowApi.GetDailyGuildHonour(jwtToken);
            if(data == null) {
                replies.push(messages.BotError());
                break;
            }

            replies.push(data.message);
            reactions = data.reactions;
            replyToPerson = false;
            break;

        case '!honouradd':
        case'!honoradd':
            if(message.channel != null) message.channel.startTyping();
        
            data = await gowApi.IncludeGuildMembersInHonourRota(parsedMessage.Arguments, discordUser, jwtToken);
            if(data == null) {
                replies.push(messages.BotError());
                break;
            }

            replies.push(data.message);
            break;

        case '!honourremove':
        case'!honorremove':
            if(message.channel != null) message.channel.startTyping();
        
            data = await gowApi.ExcludeGuildMembersFromHonourRota(parsedMessage.Arguments, discordUser, jwtToken);
            if(data == null) {
                replies.push(messages.BotError());
                break;
            }

            replies.push(data.message);
            break;

        case '!honourrota':
        case '!honorrota':
            if(message.channel != null) message.channel.startTyping();

            data = await gowApi.GetGuildHonourRota(jwtToken);
            if(data == null) {
                replies.push(messages.BotError());
                break;
            }

            replies = replies.concat(data.messages);
            replyToPerson = false;
            break;

        case '!honourweekly':
        case '!honorweekly':
            if(message.channel != null) message.channel.startTyping();
            
            data = await gowApi.GetWeeklyGuildHonour(jwtToken);
            if(data == null) {
                replies.push(messages.BotError());
                break;
            }

            replies.push(data.message);
            replyToPerson = false;
            break;

        case '!members':
            if(message.channel != null) message.channel.startTyping();
            
            data = await gowApi.GetGuildMembers(jwtToken);
            if(data == null) {
                replies.push(messages.BotError());
                break;
            }

            replies.push(data.message);
            break;

        case '!patchnotes':
            if(message.channel != null) message.channel.startTyping();
            
            data = await gowApi.GetLatestPatchNote();
            if(data == null) {
                replies.push(messages.BotError());
                break;
            }

            replies = replies.concat(data.messages);
            replyToPerson = false;
            break;

        case '!patchnotesmajor':
            if(message.channel != null) message.channel.startTyping();
            
            data = await gowApi.GetLatestMajorPatchNote();
            if(data == null) {
                replies.push(messages.BotError());
                break;
            }

            replies = replies.concat(data.messages);
            replyToPerson = false;
            break;

        case '!taskpoll':
            if(message.channel != null) message.channel.startTyping();
            
            replies.push(await messages.TaskPoll());
            reactions = await messages.TaskPollReactions();
            replyToPerson = false;
            break;

        case '!test':
            var testMessage = await messages.AboutThisBot();
            testMessage.embed.table = "This is a test!"

            replies.push(testMessage);    
            break;
        
        default:
            replies.push(messages.BotError());
            break;
    }

    await messages.SendReplies(discord, bot, message, replies, reactions, replyToPerson);
});

// Login to Discord as the Bot
bot.login(process.env.BOT_TOKEN); 